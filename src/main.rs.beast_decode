use libbeast::{self, BeastBuffer};

fn assert_eq_with_message<T: std::fmt::Debug + PartialEq>(a: T, b: T) {
    if a == b {
        println!("pass");
    } else {
        panic!("fail: left: `{:?}`, right: `{:?}`", a, b);
    }
}

fn main() {
    let mut bb: BeastBuffer = BeastBuffer::default();

    println!("Testing beast message: 1a32083e27b6cb6a1a1a00a1841a1ac3b31d");
    // test from https://github.com/firestuff/adsb-tools/blob/master/protocols/beast.md
    bb.buffer = hex::decode("1a32083e27b6cb6a1a1a00a1841a1ac3b31d").unwrap();
    bb.read_single_frame().unwrap();
    //println!("{}", bb.to_string());
    assert_eq_with_message(bb.frames[0].message_type, 0x32);
    assert_eq_with_message(bb.frames[0].timestamp, 9063047285610);
    assert_eq_with_message(bb.frames[0].signal, 0x1A);
    assert_eq_with_message(bb.frames[0].data.as_ref().unwrap().to_string(),
        r#" Short Air-Air Surveillance
  ICAO Address:  a0b553 (Mode S / ADS-B)
  Air/Ground:    airborne?
  Altitude:      5650 ft barometric
"#.to_string());

    // tests from https://github.com/cjkreklow/go-adsb/blob/main/beast/frame_test.go
    println!("Testing beast message: 1a321a1af933baf325c45da99adad95ff61a32083e27b6cb6a1a1a00a1841a1ac3b31d1a32");
    bb.frames.clear();
    bb.buffer = hex::decode("1a321a1af933baf325c45da99adad95ff61a32083e27b6cb6a1a1a00a1841a1ac3b31d1a32").unwrap();
    bb.read_beast_buffer().unwrap();
    assert_eq_with_message(bb.frames[0].data.as_ref().unwrap().to_string(),
        r#" All Call Reply
  ICAO Address:  a99ada (Mode S / ADS-B)
  Air/Ground:    airborne
"#.to_string());
    assert_eq_with_message(bb.frames[1].data.as_ref().unwrap().to_string(),
        r#" Short Air-Air Surveillance
  ICAO Address:  a0b553 (Mode S / ADS-B)
  Air/Ground:    airborne?
  Altitude:      5650 ft barometric
"#.to_string());

    // testUnmarshalShort
    println!("Testing beast message: 1affffff");
    bb.frames.clear();
    bb.buffer = hex::decode("1affffff").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: message type 0x1A is not one of: [0x,31, 0x32, 0x33]".to_string());

    // testUnmarshalBadLength1
    println!("Testing beast message: 1a31ffffffffffffff1a1a");
    bb.frames.clear();
    bb.buffer = hex::decode("1a31ffffffffffffff1a1a").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: expected 11 bytes, received 10".to_string());

    // testUnmarshalBadLength2
    println!("Testing beast message: 1a32ffff1a1affff1a1affff");
    bb.frames.clear();
    bb.buffer = hex::decode("1a32ffff1a1affff1a1affff").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: expected 16 bytes, received 10".to_string());

    // testUnmarshalBadLength3
    println!("Testing beast message: 1a33ffffffffffffffffffffffffffffffffffffffffffffff");
    bb.frames.clear();
    bb.buffer = hex::decode("1a33ffffffffffffffffffffffffffffffffffffffffffffff").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: expected 23 bytes, received 25".to_string());

    // testUnmarshalBadEscape
    println!("Testing beast message: 1a31ffffffffffffffffffffffffff1a");
    bb.frames.clear();
    bb.buffer = hex::decode("1a31ffffffffffffffffffffffffff1a").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: expected 11 bytes, received 16".to_string());

    // testUnmarshalBadType
    println!("Testing beast message: 1a3affffffffffffffffff");
    bb.frames.clear();
    bb.buffer = hex::decode("1a3affffffffffffffffff").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: message type 0x1A is not one of: [0x,31, 0x32, 0x33]".to_string());
    
    // testUnmarshalNoType
    println!("Testing beast message: ff00ff00ff00ff00ff00");
    bb.frames.clear();
    bb.buffer = hex::decode("ff00ff00ff00ff00ff00").unwrap();
    assert_eq_with_message(bb.read_single_frame().unwrap_err().to_string(), "invalid message: message type 0xFF is not one of: [0x,31, 0x32, 0x33]".to_string());

    // testUnmarshalBytes
    println!("Testing beast message: 1a321a1af933baf325c45da99adad95ff6");
    bb.frames.clear();
    bb.buffer = hex::decode("1a321a1af933baf325c45da99adad95ff6").unwrap();
    bb.read_single_frame().unwrap();
    assert_eq_with_message(bb.frames[0].message_type, 0x32);
    assert_eq_with_message(bb.frames[0].timestamp, 29657617068837);
    assert_eq_with_message(bb.frames[0].signal, 0xC4);
    assert_eq_with_message(bb.frames[0].data.as_ref().unwrap().to_string(),
        r#" All Call Reply
  ICAO Address:  a99ada (Mode S / ADS-B)
  Air/Ground:    airborne
"#.to_string());

    // testUnmarshalBytes
    println!("Testing beast message: 1a321af933baf325c45da99adad95ff6");
    bb.frames.clear();
    bb.buffer = hex::decode("1a321af933baf325c45da99adad95ff6").unwrap();
    bb.read_single_frame().unwrap();
    assert_eq_with_message(bb.frames[0].message_type, 0x32);
    assert_eq_with_message(bb.frames[0].timestamp, 29657617068837);
    assert_eq_with_message(bb.frames[0].signal, 0xC4);
    assert_eq_with_message(bb.frames[0].data.as_ref().unwrap().to_string(),
        r#" All Call Reply
  ICAO Address:  a99ada (Mode S / ADS-B)
  Air/Ground:    airborne
"#.to_string());

    // testUnmarshalMarshal
    println!("Testing beast message: 1a321a1af933baf325c45da99adad95ff6");
    bb.frames.clear();
    bb.buffer = hex::decode("1a321a1af933baf325c45da99adad95ff6").unwrap();
    bb.read_single_frame().unwrap();
    assert_eq_with_message(bb.frames[0].message_type, 0x32);
    assert_eq_with_message(bb.frames[0].timestamp, 29657617068837);
    assert_eq_with_message(bb.frames[0].signal, 0xC4);
    assert_eq_with_message(bb.frames[0].data.as_ref().unwrap().to_string(),
        r#" All Call Reply
  ICAO Address:  a99ada (Mode S / ADS-B)
  Air/Ground:    airborne
"#.to_string());
}
